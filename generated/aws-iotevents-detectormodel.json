{
  "definitions": {
    "Action": {
      "type": "object",
      "description": "The actions to be performed.",
      "properties": [
        {
          "name": "ClearTimer",
          "optional": true,
          "type": {
            "type": "ref",
            "typeName": "ClearTimer"
          }
        },
        {
          "name": "DynamoDB",
          "optional": true,
          "type": {
            "type": "ref",
            "typeName": "DynamoDB"
          }
        },
        {
          "name": "DynamoDBv2",
          "optional": true,
          "type": {
            "type": "ref",
            "typeName": "DynamoDBv2"
          }
        },
        {
          "name": "Firehose",
          "optional": true,
          "type": {
            "type": "ref",
            "typeName": "Firehose"
          }
        },
        {
          "name": "IotEvents",
          "optional": true,
          "type": {
            "type": "ref",
            "typeName": "IotEvents"
          }
        },
        {
          "name": "IotSiteWise",
          "optional": true,
          "type": {
            "type": "ref",
            "typeName": "IotSiteWise"
          }
        },
        {
          "name": "IotTopicPublish",
          "optional": true,
          "type": {
            "type": "ref",
            "typeName": "IotTopicPublish"
          }
        },
        {
          "name": "Lambda",
          "optional": true,
          "type": {
            "type": "ref",
            "typeName": "Lambda"
          }
        },
        {
          "name": "ResetTimer",
          "optional": true,
          "type": {
            "type": "ref",
            "typeName": "ResetTimer"
          }
        },
        {
          "name": "SetTimer",
          "optional": true,
          "type": {
            "type": "ref",
            "typeName": "SetTimer"
          }
        },
        {
          "name": "SetVariable",
          "optional": true,
          "type": {
            "type": "ref",
            "typeName": "SetVariable"
          }
        },
        {
          "name": "Sns",
          "optional": true,
          "type": {
            "type": "ref",
            "typeName": "Sns"
          }
        },
        {
          "name": "Sqs",
          "optional": true,
          "type": {
            "type": "ref",
            "typeName": "Sqs"
          }
        }
      ]
    },
    "AssetPropertyTimestamp": {
      "type": "object",
      "description": "A structure that contains timestamp information. For more information, see [TimeInNanos](https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_TimeInNanos.html) in the *AWS IoT SiteWise API Reference*.",
      "properties": [
        {
          "name": "OffsetInNanos",
          "description": "The timestamp, in seconds, in the Unix epoch format. The valid range is between `1-31556889864403199`. You can also specify an expression.",
          "optional": true,
          "type": {
            "type": "string",
            "description": "The timestamp, in seconds, in the Unix epoch format. The valid range is between `1-31556889864403199`. You can also specify an expression."
          }
        },
        {
          "name": "TimeInSeconds",
          "description": "The nanosecond offset converted from `timeInSeconds`. The valid range is between `0-999999999`. You can also specify an expression.",
          "optional": false,
          "type": {
            "type": "string",
            "description": "The nanosecond offset converted from `timeInSeconds`. The valid range is between `0-999999999`. You can also specify an expression."
          }
        }
      ]
    },
    "AssetPropertyValue": {
      "type": "object",
      "description": "A structure that contains value information. For more information, see [AssetPropertyValue](https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_AssetPropertyValue.html) in the *AWS IoT SiteWise API Reference*.",
      "properties": [
        {
          "name": "Quality",
          "description": "The quality of the asset property value. The value must be `GOOD`, `BAD`, or `UNCERTAIN`. You can also specify an expression.",
          "optional": true,
          "type": {
            "type": "string",
            "description": "The quality of the asset property value. The value must be `GOOD`, `BAD`, or `UNCERTAIN`. You can also specify an expression."
          }
        },
        {
          "name": "Timestamp",
          "optional": true,
          "type": {
            "type": "ref",
            "typeName": "AssetPropertyTimestamp"
          }
        },
        {
          "name": "Value",
          "optional": false,
          "type": {
            "type": "ref",
            "typeName": "AssetPropertyVariant"
          }
        }
      ]
    },
    "AssetPropertyVariant": {
      "type": "object",
      "description": "A structure that contains an asset property value. For more information, see [Variant](https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_Variant.html) in the *AWS IoT SiteWise API Reference*.",
      "properties": [
        {
          "name": "BooleanValue",
          "description": "The asset property value is a Boolean value that must be `TRUE` or `FALSE`. You can also specify an expression. If you use an expression, the evaluated result should be a Boolean value.",
          "optional": true,
          "type": {
            "type": "string",
            "description": "The asset property value is a Boolean value that must be `TRUE` or `FALSE`. You can also specify an expression. If you use an expression, the evaluated result should be a Boolean value."
          }
        },
        {
          "name": "DoubleValue",
          "description": "The asset property value is a double. You can also specify an expression. If you use an expression, the evaluated result should be a double.",
          "optional": true,
          "type": {
            "type": "string",
            "description": "The asset property value is a double. You can also specify an expression. If you use an expression, the evaluated result should be a double."
          }
        },
        {
          "name": "IntegerValue",
          "description": "The asset property value is an integer. You can also specify an expression. If you use an expression, the evaluated result should be an integer.",
          "optional": true,
          "type": {
            "type": "string",
            "description": "The asset property value is an integer. You can also specify an expression. If you use an expression, the evaluated result should be an integer."
          }
        },
        {
          "name": "StringValue",
          "description": "The asset property value is a string. You can also specify an expression. If you use an expression, the evaluated result should be a string.",
          "optional": true,
          "type": {
            "type": "string",
            "description": "The asset property value is a string. You can also specify an expression. If you use an expression, the evaluated result should be a string."
          }
        }
      ]
    },
    "ClearTimer": {
      "type": "object",
      "description": "Information needed to clear the timer.",
      "properties": [
        {
          "name": "TimerName",
          "optional": false,
          "type": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1
          }
        }
      ]
    },
    "DetectorModelDefinition": {
      "type": "object",
      "description": "Information that defines how a detector operates.",
      "properties": [
        {
          "name": "InitialStateName",
          "description": "The state that is entered at the creation of each detector (instance).",
          "optional": false,
          "type": {
            "type": "string",
            "description": "The state that is entered at the creation of each detector (instance).",
            "maxLength": 128,
            "minLength": 1
          }
        },
        {
          "name": "States",
          "description": "Information about the states of the detector.",
          "optional": false,
          "type": {
            "type": "array",
            "description": "Information about the states of the detector.",
            "itemType": {
              "type": "ref",
              "typeName": "State"
            },
            "minLength": 1
          }
        }
      ]
    },
    "DynamoDB": {
      "type": "object",
      "description": "Writes to the DynamoDB table that you created. The default action payload contains all attribute-value pairs that have the information about the detector model instance and the event that triggered the action. You can also customize the [payload](https://docs.aws.amazon.com/iotevents/latest/apireference/API_Payload.html). One column of the DynamoDB table receives all attribute-value pairs in the payload that you specify. For more information, see [Actions](https://docs.aws.amazon.com/iotevents/latest/developerguide/iotevents-event-actions.html) in *AWS IoT Events Developer Guide*.",
      "properties": [
        {
          "name": "HashKeyField",
          "description": "The name of the hash key (also called the partition key).",
          "optional": false,
          "type": {
            "type": "string",
            "description": "The name of the hash key (also called the partition key)."
          }
        },
        {
          "name": "HashKeyType",
          "description": "The data type for the hash key (also called the partition key). You can specify the following values:\n\n* `STRING` - The hash key is a string.\n\n* `NUMBER` - The hash key is a number.\n\nIf you don't specify `hashKeyType`, the default value is `STRING`.",
          "optional": true,
          "type": {
            "type": "string",
            "description": "The data type for the hash key (also called the partition key). You can specify the following values:\n\n* `STRING` - The hash key is a string.\n\n* `NUMBER` - The hash key is a number.\n\nIf you don't specify `hashKeyType`, the default value is `STRING`."
          }
        },
        {
          "name": "HashKeyValue",
          "description": "The value of the hash key (also called the partition key).",
          "optional": false,
          "type": {
            "type": "string",
            "description": "The value of the hash key (also called the partition key)."
          }
        },
        {
          "name": "Operation",
          "description": "The type of operation to perform. You can specify the following values:\n\n* `INSERT` - Insert data as a new item into the DynamoDB table. This item uses the specified hash key as a partition key. If you specified a range key, the item uses the range key as a sort key.\n\n* `UPDATE` - Update an existing item of the DynamoDB table with new data. This item's partition key must match the specified hash key. If you specified a range key, the range key must match the item's sort key.\n\n* `DELETE` - Delete an existing item of the DynamoDB table. This item's partition key must match the specified hash key. If you specified a range key, the range key must match the item's sort key.\n\nIf you don't specify this parameter, AWS IoT Events triggers the `INSERT` operation.",
          "optional": true,
          "type": {
            "type": "string",
            "description": "The type of operation to perform. You can specify the following values:\n\n* `INSERT` - Insert data as a new item into the DynamoDB table. This item uses the specified hash key as a partition key. If you specified a range key, the item uses the range key as a sort key.\n\n* `UPDATE` - Update an existing item of the DynamoDB table with new data. This item's partition key must match the specified hash key. If you specified a range key, the range key must match the item's sort key.\n\n* `DELETE` - Delete an existing item of the DynamoDB table. This item's partition key must match the specified hash key. If you specified a range key, the range key must match the item's sort key.\n\nIf you don't specify this parameter, AWS IoT Events triggers the `INSERT` operation."
          }
        },
        {
          "name": "Payload",
          "optional": true,
          "type": {
            "type": "ref",
            "typeName": "Payload"
          }
        },
        {
          "name": "PayloadField",
          "description": "The name of the DynamoDB column that receives the action payload.\n\nIf you don't specify this parameter, the name of the DynamoDB column is `payload`.",
          "optional": true,
          "type": {
            "type": "string",
            "description": "The name of the DynamoDB column that receives the action payload.\n\nIf you don't specify this parameter, the name of the DynamoDB column is `payload`."
          }
        },
        {
          "name": "RangeKeyField",
          "description": "The name of the range key (also called the sort key).",
          "optional": true,
          "type": {
            "type": "string",
            "description": "The name of the range key (also called the sort key)."
          }
        },
        {
          "name": "RangeKeyType",
          "description": "The data type for the range key (also called the sort key), You can specify the following values:\n\n* `STRING` - The range key is a string.\n\n* `NUMBER` - The range key is number.\n\nIf you don't specify `rangeKeyField`, the default value is `STRING`.",
          "optional": true,
          "type": {
            "type": "string",
            "description": "The data type for the range key (also called the sort key), You can specify the following values:\n\n* `STRING` - The range key is a string.\n\n* `NUMBER` - The range key is number.\n\nIf you don't specify `rangeKeyField`, the default value is `STRING`."
          }
        },
        {
          "name": "RangeKeyValue",
          "description": "The value of the range key (also called the sort key).",
          "optional": true,
          "type": {
            "type": "string",
            "description": "The value of the range key (also called the sort key)."
          }
        },
        {
          "name": "TableName",
          "description": "The name of the DynamoDB table.",
          "optional": false,
          "type": {
            "type": "string",
            "description": "The name of the DynamoDB table."
          }
        }
      ]
    },
    "DynamoDBv2": {
      "type": "object",
      "description": "Defines an action to write to the Amazon DynamoDB table that you created. The default action payload contains all attribute-value pairs that have the information about the detector model instance and the event that triggered the action. You can also customize the [payload](https://docs.aws.amazon.com/iotevents/latest/apireference/API_Payload.html). A separate column of the DynamoDB table receives one attribute-value pair in the payload that you specify.\n\nYou can use expressions for parameters that are strings. For more information, see [Expressions](https://docs.aws.amazon.com/iotevents/latest/developerguide/iotevents-expressions.html) in the *AWS IoT Events Developer Guide*.",
      "properties": [
        {
          "name": "Payload",
          "optional": true,
          "type": {
            "type": "ref",
            "typeName": "Payload"
          }
        },
        {
          "name": "TableName",
          "description": "The name of the DynamoDB table.",
          "optional": false,
          "type": {
            "type": "string",
            "description": "The name of the DynamoDB table."
          }
        }
      ]
    },
    "Event": {
      "type": "object",
      "description": "Specifies the `actions` to be performed when the `condition` evaluates to `TRUE`.",
      "properties": [
        {
          "name": "Actions",
          "description": "The actions to be performed.",
          "optional": true,
          "type": {
            "type": "array",
            "description": "The actions to be performed.",
            "itemType": {
              "type": "ref",
              "typeName": "Action"
            }
          }
        },
        {
          "name": "Condition",
          "description": "The Boolean expression that, when `TRUE`, causes the `actions` to be performed. If not present, the `actions` are performed (=`TRUE`). If the expression result is not a `Boolean` value, the `actions` are not performed (=`FALSE`).",
          "optional": true,
          "type": {
            "type": "string",
            "description": "The Boolean expression that, when `TRUE`, causes the `actions` to be performed. If not present, the `actions` are performed (=`TRUE`). If the expression result is not a `Boolean` value, the `actions` are not performed (=`FALSE`).",
            "maxLength": 512
          }
        },
        {
          "name": "EventName",
          "description": "The name of the event.",
          "optional": false,
          "type": {
            "type": "string",
            "description": "The name of the event.",
            "maxLength": 128
          }
        }
      ]
    },
    "Firehose": {
      "type": "object",
      "description": "Sends information about the detector model instance and the event that triggered the action to an Amazon Kinesis Data Firehose delivery stream.",
      "properties": [
        {
          "name": "DeliveryStreamName",
          "description": "The name of the Kinesis Data Firehose delivery stream where the data is written.",
          "optional": false,
          "type": {
            "type": "string",
            "description": "The name of the Kinesis Data Firehose delivery stream where the data is written."
          }
        },
        {
          "name": "Payload",
          "optional": true,
          "type": {
            "type": "ref",
            "typeName": "Payload"
          }
        },
        {
          "name": "Separator",
          "description": "A character separator that is used to separate records written to the Kinesis Data Firehose delivery stream. Valid values are: '\\n' (newline), '\\t' (tab), '\\r\\n' (Windows newline), ',' (comma).",
          "optional": true,
          "type": {
            "type": "string",
            "description": "A character separator that is used to separate records written to the Kinesis Data Firehose delivery stream. Valid values are: '\\n' (newline), '\\t' (tab), '\\r\\n' (Windows newline), ',' (comma).",
            "pattern": "([\\n\\t])|(\\r\\n)|(,)"
          }
        }
      ]
    },
    "IotEvents": {
      "type": "object",
      "description": "Sends an AWS IoT Events input, passing in information about the detector model instance and the event that triggered the action.",
      "properties": [
        {
          "name": "InputName",
          "description": "The name of the AWS IoT Events input where the data is sent.",
          "optional": false,
          "type": {
            "type": "string",
            "description": "The name of the AWS IoT Events input where the data is sent.",
            "maxLength": 128,
            "minLength": 1,
            "pattern": "^[a-zA-Z][a-zA-Z0-9_]*$"
          }
        },
        {
          "name": "Payload",
          "optional": true,
          "type": {
            "type": "ref",
            "typeName": "Payload"
          }
        }
      ]
    },
    "IotSiteWise": {
      "type": "object",
      "description": "Sends information about the detector model instance and the event that triggered the action to a specified asset property in AWS IoT SiteWise.",
      "properties": [
        {
          "name": "AssetId",
          "description": "The ID of the asset that has the specified property. You can specify an expression.",
          "optional": true,
          "type": {
            "type": "string",
            "description": "The ID of the asset that has the specified property. You can specify an expression."
          }
        },
        {
          "name": "EntryId",
          "description": "A unique identifier for this entry. You can use the entry ID to track which data entry causes an error in case of failure. The default is a new unique identifier. You can also specify an expression.",
          "optional": true,
          "type": {
            "type": "string",
            "description": "A unique identifier for this entry. You can use the entry ID to track which data entry causes an error in case of failure. The default is a new unique identifier. You can also specify an expression."
          }
        },
        {
          "name": "PropertyAlias",
          "description": "The alias of the asset property. You can also specify an expression.",
          "optional": true,
          "type": {
            "type": "string",
            "description": "The alias of the asset property. You can also specify an expression."
          }
        },
        {
          "name": "PropertyId",
          "description": "The ID of the asset property. You can specify an expression.",
          "optional": true,
          "type": {
            "type": "string",
            "description": "The ID of the asset property. You can specify an expression."
          }
        },
        {
          "name": "PropertyValue",
          "optional": false,
          "type": {
            "type": "ref",
            "typeName": "AssetPropertyValue"
          }
        }
      ]
    },
    "IotTopicPublish": {
      "type": "object",
      "description": "Information required to publish the MQTT message through the AWS IoT message broker.",
      "properties": [
        {
          "name": "MqttTopic",
          "description": "The MQTT topic of the message. You can use a string expression that includes variables (`$variable.<variable-name>`) and input values (`$input.<input-name>.<path-to-datum>`) as the topic string.",
          "optional": false,
          "type": {
            "type": "string",
            "description": "The MQTT topic of the message. You can use a string expression that includes variables (`$variable.<variable-name>`) and input values (`$input.<input-name>.<path-to-datum>`) as the topic string.",
            "maxLength": 128,
            "minLength": 1
          }
        },
        {
          "name": "Payload",
          "optional": true,
          "type": {
            "type": "ref",
            "typeName": "Payload"
          }
        }
      ]
    },
    "Lambda": {
      "type": "object",
      "properties": [
        {
          "name": "FunctionArn",
          "description": "The ARN of the Lambda function that is executed.",
          "optional": false,
          "type": {
            "type": "string",
            "description": "The ARN of the Lambda function that is executed.",
            "maxLength": 2048,
            "minLength": 1
          }
        },
        {
          "name": "Payload",
          "optional": true,
          "type": {
            "type": "ref",
            "typeName": "Payload"
          }
        }
      ]
    },
    "OnEnter": {
      "type": "object",
      "description": "When entering this state, perform these `actions` if the `condition` is `TRUE`.",
      "properties": [
        {
          "name": "Events",
          "description": "Specifies the `actions` that are performed when the state is entered and the `condition` is `TRUE`.",
          "optional": true,
          "type": {
            "type": "array",
            "description": "Specifies the `actions` that are performed when the state is entered and the `condition` is `TRUE`.",
            "itemType": {
              "type": "ref",
              "typeName": "Event"
            }
          }
        }
      ]
    },
    "OnExit": {
      "type": "object",
      "description": "When exiting this state, perform these `actions` if the specified `condition` is `TRUE`.",
      "properties": [
        {
          "name": "Events",
          "description": "Specifies the `actions` that are performed when the state is exited and the `condition` is `TRUE`.",
          "optional": true,
          "type": {
            "type": "array",
            "description": "Specifies the `actions` that are performed when the state is exited and the `condition` is `TRUE`.",
            "itemType": {
              "type": "ref",
              "typeName": "Event"
            }
          }
        }
      ]
    },
    "OnInput": {
      "type": "object",
      "description": "When an input is received and the `condition` is `TRUE`, perform the specified `actions`.",
      "properties": [
        {
          "name": "Events",
          "description": "Specifies the `actions` performed when the `condition` evaluates to `TRUE`.",
          "optional": true,
          "type": {
            "type": "array",
            "description": "Specifies the `actions` performed when the `condition` evaluates to `TRUE`.",
            "itemType": {
              "type": "ref",
              "typeName": "Event"
            }
          }
        },
        {
          "name": "TransitionEvents",
          "description": "Specifies the `actions` performed, and the next `state` entered, when a `condition` evaluates to `TRUE`.",
          "optional": true,
          "type": {
            "type": "array",
            "description": "Specifies the `actions` performed, and the next `state` entered, when a `condition` evaluates to `TRUE`.",
            "itemType": {
              "type": "ref",
              "typeName": "TransitionEvent"
            }
          }
        }
      ]
    },
    "Payload": {
      "type": "object",
      "description": "Information needed to configure the payload.\n\nBy default, AWS IoT Events generates a standard payload in JSON for any action. This action payload contains all attribute-value pairs that have the information about the detector model instance and the event triggered the action. To configure the action payload, you can use `contentExpression`.",
      "properties": [
        {
          "name": "ContentExpression",
          "description": "The content of the payload. You can use a string expression that includes quoted strings (`'<string>'`), variables (`$variable.<variable-name>`), input values (`$input.<input-name>.<path-to-datum>`), string concatenations, and quoted strings that contain `${}` as the content. The recommended maximum size of a content expression is 1 KB.",
          "optional": false,
          "type": {
            "type": "string",
            "description": "The content of the payload. You can use a string expression that includes quoted strings (`'<string>'`), variables (`$variable.<variable-name>`), input values (`$input.<input-name>.<path-to-datum>`), string concatenations, and quoted strings that contain `${}` as the content. The recommended maximum size of a content expression is 1 KB.",
            "minLength": 1
          }
        },
        {
          "name": "Type",
          "description": "The value of the payload type can be either `STRING` or `JSON`.",
          "optional": false,
          "type": {
            "type": "string",
            "description": "The value of the payload type can be either `STRING` or `JSON`."
          }
        }
      ]
    },
    "ResetTimer": {
      "type": "object",
      "description": "Information required to reset the timer. The timer is reset to the previously evaluated result of the duration. The duration expression isn't reevaluated when you reset the timer.",
      "properties": [
        {
          "name": "TimerName",
          "description": "The name of the timer to reset.",
          "optional": false,
          "type": {
            "type": "string",
            "description": "The name of the timer to reset.",
            "maxLength": 128,
            "minLength": 1
          }
        }
      ]
    },
    "SetTimer": {
      "type": "object",
      "description": "Information needed to set the timer.",
      "properties": [
        {
          "name": "DurationExpression",
          "description": "The duration of the timer, in seconds. You can use a string expression that includes numbers, variables (`$variable.<variable-name>`), and input values (`$input.<input-name>.<path-to-datum>`) as the duration. The range of the duration is `1-31622400` seconds. To ensure accuracy, the minimum duration is `60` seconds. The evaluated result of the duration is rounded down to the nearest whole number.",
          "optional": true,
          "type": {
            "type": "string",
            "description": "The duration of the timer, in seconds. You can use a string expression that includes numbers, variables (`$variable.<variable-name>`), and input values (`$input.<input-name>.<path-to-datum>`) as the duration. The range of the duration is `1-31622400` seconds. To ensure accuracy, the minimum duration is `60` seconds. The evaluated result of the duration is rounded down to the nearest whole number.",
            "maxLength": 1024,
            "minLength": 1
          }
        },
        {
          "name": "Seconds",
          "description": "The number of seconds until the timer expires. The minimum value is `60` seconds to ensure accuracy. The maximum value is `31622400` seconds.",
          "optional": true,
          "type": {
            "type": "number",
            "description": "The number of seconds until the timer expires. The minimum value is `60` seconds to ensure accuracy. The maximum value is `31622400` seconds.",
            "isInteger": true,
            "maximum": 31622400,
            "minimum": 60
          }
        },
        {
          "name": "TimerName",
          "description": "The name of the timer.",
          "optional": false,
          "type": {
            "type": "string",
            "description": "The name of the timer.",
            "maxLength": 128,
            "minLength": 1
          }
        }
      ]
    },
    "SetVariable": {
      "type": "object",
      "description": "Information about the variable and its new value.",
      "properties": [
        {
          "name": "Value",
          "description": "The new value of the variable.",
          "optional": false,
          "type": {
            "type": "string",
            "description": "The new value of the variable.",
            "maxLength": 1024,
            "minLength": 1
          }
        },
        {
          "name": "VariableName",
          "description": "The name of the variable.",
          "optional": false,
          "type": {
            "type": "string",
            "description": "The name of the variable.",
            "maxLength": 128,
            "minLength": 1,
            "pattern": "^[a-zA-Z][a-zA-Z0-9_]*$"
          }
        }
      ]
    },
    "Sns": {
      "type": "object",
      "description": "Information required to publish the Amazon SNS message.",
      "properties": [
        {
          "name": "Payload",
          "optional": true,
          "type": {
            "type": "ref",
            "typeName": "Payload"
          }
        },
        {
          "name": "TargetArn",
          "description": "The ARN of the Amazon SNS target where the message is sent.",
          "optional": false,
          "type": {
            "type": "string",
            "description": "The ARN of the Amazon SNS target where the message is sent.",
            "maxLength": 2048,
            "minLength": 1
          }
        }
      ]
    },
    "Sqs": {
      "type": "object",
      "properties": [
        {
          "name": "Payload",
          "optional": true,
          "type": {
            "type": "ref",
            "typeName": "Payload"
          }
        },
        {
          "name": "QueueUrl",
          "description": "The URL of the SQS queue where the data is written.",
          "optional": false,
          "type": {
            "type": "string",
            "description": "The URL of the SQS queue where the data is written."
          }
        },
        {
          "name": "UseBase64",
          "description": "Set this to `TRUE` if you want the data to be base-64 encoded before it is written to the queue. Otherwise, set this to `FALSE`.",
          "optional": true,
          "type": {
            "type": "boolean",
            "description": "Set this to `TRUE` if you want the data to be base-64 encoded before it is written to the queue. Otherwise, set this to `FALSE`."
          }
        }
      ]
    },
    "State": {
      "type": "object",
      "description": "Information that defines a state of a detector.",
      "properties": [
        {
          "name": "OnEnter",
          "optional": true,
          "type": {
            "type": "ref",
            "typeName": "OnEnter"
          }
        },
        {
          "name": "OnExit",
          "optional": true,
          "type": {
            "type": "ref",
            "typeName": "OnExit"
          }
        },
        {
          "name": "OnInput",
          "optional": true,
          "type": {
            "type": "ref",
            "typeName": "OnInput"
          }
        },
        {
          "name": "StateName",
          "description": "The name of the state.",
          "optional": false,
          "type": {
            "type": "string",
            "description": "The name of the state.",
            "maxLength": 128,
            "minLength": 1
          }
        }
      ]
    },
    "Tag": {
      "type": "object",
      "description": "Tags to be applied to Input.",
      "properties": [
        {
          "name": "Key",
          "description": "Key of the Tag.",
          "optional": false,
          "type": {
            "type": "string",
            "description": "Key of the Tag."
          }
        },
        {
          "name": "Value",
          "description": "Value of the Tag.",
          "optional": false,
          "type": {
            "type": "string",
            "description": "Value of the Tag."
          }
        }
      ]
    },
    "TransitionEvent": {
      "type": "object",
      "description": "Specifies the `actions `performed and the next `state` entered when a `condition` evaluates to `TRUE`.",
      "properties": [
        {
          "name": "Actions",
          "description": "The actions to be performed.",
          "optional": true,
          "type": {
            "type": "array",
            "description": "The actions to be performed.",
            "itemType": {
              "type": "ref",
              "typeName": "Action"
            }
          }
        },
        {
          "name": "Condition",
          "description": "A Boolean expression that when `TRUE` causes the `actions` to be performed and the `nextState` to be entered.",
          "optional": false,
          "type": {
            "type": "string",
            "description": "A Boolean expression that when `TRUE` causes the `actions` to be performed and the `nextState` to be entered.",
            "maxLength": 512
          }
        },
        {
          "name": "EventName",
          "description": "The name of the event.",
          "optional": false,
          "type": {
            "type": "string",
            "description": "The name of the event.",
            "maxLength": 128,
            "minLength": 1
          }
        },
        {
          "name": "NextState",
          "description": "The next state to enter.",
          "optional": false,
          "type": {
            "type": "string",
            "description": "The next state to enter.",
            "maxLength": 128,
            "minLength": 1
          }
        }
      ]
    }
  },
  "resource": {
    "type": "object",
    "description": "The AWS::IoTEvents::DetectorModel resource creates a detector model. You create a *detector model* (a model of your equipment or process) using *states*. For each state, you define conditional (Boolean) logic that evaluates the incoming inputs to detect significant events. When an event is detected, it can change the state or trigger custom-built or predefined actions using other AWS services. You can define additional events that trigger actions when entering or exiting a state and, optionally, when a condition is met. For more information, see [How to Use AWS IoT Events](https://docs.aws.amazon.com/iotevents/latest/developerguide/how-to-use-iotevents.html) in the *AWS IoT Events Developer Guide*.",
    "properties": [
      {
        "name": "DetectorModelDefinition",
        "optional": false,
        "type": {
          "type": "ref",
          "typeName": "DetectorModelDefinition"
        }
      },
      {
        "name": "DetectorModelDescription",
        "description": "A brief description of the detector model.",
        "optional": true,
        "type": {
          "type": "string",
          "description": "A brief description of the detector model.",
          "maxLength": 128
        }
      },
      {
        "name": "DetectorModelName",
        "description": "The name of the detector model.",
        "optional": true,
        "type": {
          "type": "string",
          "description": "The name of the detector model.",
          "maxLength": 128,
          "minLength": 1,
          "pattern": "^[a-zA-Z0-9_-]+$"
        }
      },
      {
        "name": "EvaluationMethod",
        "description": "Information about the order in which events are evaluated and how actions are executed.",
        "optional": true,
        "type": {
          "type": "string",
          "description": "Information about the order in which events are evaluated and how actions are executed.",
          "allowedValues": ["BATCH", "SERIAL"]
        }
      },
      {
        "name": "Key",
        "description": "The value used to identify a detector instance. When a device or system sends input, a new detector instance with a unique key value is created. AWS IoT Events can continue to route input to its corresponding detector instance based on this identifying information.\n\nThis parameter uses a JSON-path expression to select the attribute-value pair in the message payload that is used for identification. To route the message to the correct detector instance, the device must send a message payload that contains the same attribute-value.",
        "optional": true,
        "type": {
          "type": "string",
          "description": "The value used to identify a detector instance. When a device or system sends input, a new detector instance with a unique key value is created. AWS IoT Events can continue to route input to its corresponding detector instance based on this identifying information.\n\nThis parameter uses a JSON-path expression to select the attribute-value pair in the message payload that is used for identification. To route the message to the correct detector instance, the device must send a message payload that contains the same attribute-value.",
          "maxLength": 128,
          "minLength": 1,
          "pattern": "^((`[\\w\\- ]+`)|([\\w\\-]+))(\\.((`[\\w\\- ]+`)|([\\w\\-]+)))*$"
        }
      },
      {
        "name": "RoleArn",
        "description": "The ARN of the role that grants permission to AWS IoT Events to perform its operations.",
        "optional": false,
        "type": {
          "type": "string",
          "description": "The ARN of the role that grants permission to AWS IoT Events to perform its operations.",
          "maxLength": 2048,
          "minLength": 1
        }
      },
      {
        "name": "Tags",
        "description": "An array of key-value pairs to apply to this resource.\n\nFor more information, see [Tag](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html).",
        "optional": true,
        "type": {
          "type": "array",
          "description": "An array of key-value pairs to apply to this resource.\n\nFor more information, see [Tag](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html).",
          "itemType": {
            "type": "ref",
            "typeName": "Tag"
          }
        }
      }
    ]
  },
  "awsTypeName": "AWS::IoTEvents::DetectorModel",
  "$hash": "7eb7097019f9a91d6c290b401dff443a6199d3cf"
}
